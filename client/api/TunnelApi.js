/*
 * Tunnelbot - OpenAPI 3.0
 * This is the API specification for the tunnelbot backend.
 *
 * OpenAPI spec version: 1
 * Contact: info@farmersandrobots.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Tunnel} from '../model/Tunnel';

/**
* Tunnel service.
* @module api/TunnelApi
* @version 1
*/
export class TunnelApi {

    /**
    * Constructs a new TunnelApi. 
    * @alias module:api/TunnelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addTunnel operation.
     * @callback moduleapi/TunnelApi~addTunnelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tunnel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new tunnel to the db
     * Add a new tunnel to the db
     * @param {module:model/Tunnel} body Create a new tunnel in the db
     * @param {Number} id 
     * @param {String} kind 
     * @param {String} name 
     * @param {module:api/TunnelApi~addTunnelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addTunnel(body, id, kind, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addTunnel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTunnel");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling addTunnel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addTunnel");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': id,'kind': kind,'name': name
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Tunnel;

      return this.apiClient.callApi(
        '/tunnel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTunnel operation.
     * @callback moduleapi/TunnelApi~deleteTunnelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a tunnel
     * delete a tunnel
     * @param {Number} tunnelId Tunnel id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/TunnelApi~deleteTunnelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTunnel(tunnelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tunnelId' is set
      if (tunnelId === undefined || tunnelId === null) {
        throw new Error("Missing the required parameter 'tunnelId' when calling deleteTunnel");
      }

      let pathParams = {
        'tunnelId': tunnelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/tunnel/{tunnelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTunnelById operation.
     * @callback moduleapi/TunnelApi~getTunnelByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tunnel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find tunnel by id
     * Returns a single tunnel
     * @param {Number} tunnelId id of tunnel to return
     * @param {module:api/TunnelApi~getTunnelByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTunnelById(tunnelId, callback) {
      
      let postBody = null;
      // verify the required parameter 'tunnelId' is set
      if (tunnelId === undefined || tunnelId === null) {
        throw new Error("Missing the required parameter 'tunnelId' when calling getTunnelById");
      }

      let pathParams = {
        'tunnelId': tunnelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Tunnel;

      return this.apiClient.callApi(
        '/tunnel/{tunnelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTunnels operation.
     * @callback moduleapi/TunnelApi~getTunnelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tunnel>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the tunnels on a farm
     * Return the tunnels on a farm
     * @param {module:api/TunnelApi~getTunnelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTunnels(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Tunnel];

      return this.apiClient.callApi(
        '/tunnel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTunnel operation.
     * @callback moduleapi/TunnelApi~updateTunnelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tunnel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing tunnel
     * Update an existing tunnel by ID
     * @param {module:model/Tunnel} body Update an existent tunnel
     * @param {Number} id 
     * @param {String} kind 
     * @param {String} name 
     * @param {module:api/TunnelApi~updateTunnelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTunnel(body, id, kind, name, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTunnel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTunnel");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling updateTunnel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateTunnel");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': id,'kind': kind,'name': name
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Tunnel;

      return this.apiClient.callApi(
        '/tunnel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}