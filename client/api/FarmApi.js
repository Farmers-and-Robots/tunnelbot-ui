/*
 * Tunnelbot - OpenAPI 3.0
 * This is the API specification for the tunnelbot backend.
 *
 * OpenAPI spec version: 1
 * Contact: info@farmersandrobots.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Address} from '../model/Address';
import {Farm} from '../model/Farm';
import {PersonAssociation} from '../model/PersonAssociation';

/**
* Farm service.
* @module api/FarmApi
* @version 1
*/
export class FarmApi {

    /**
    * Constructs a new FarmApi. 
    * @alias module:api/FarmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addFarm operation.
     * @callback moduleapi/FarmApi~addFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new farm to the db
     * Add a new farm to the db
     * @param {module:model/Farm} body Create a new farm in the db
     * @param {Number} id 
     * @param {String} kind 
     * @param {String} name 
     * @param {Date} createDate 
     * @param {module:model/Address} address 
     * @param {Array.<module:model/PersonAssociation>} owners 
     * @param {Array.<module:model/PersonAssociation>} people 
     * @param {module:api/FarmApi~addFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addFarm(body, id, kind, name, createDate, address, owners, people, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addFarm");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addFarm");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling addFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addFarm");
      }
      // verify the required parameter 'createDate' is set
      if (createDate === undefined || createDate === null) {
        throw new Error("Missing the required parameter 'createDate' when calling addFarm");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling addFarm");
      }
      // verify the required parameter 'owners' is set
      if (owners === undefined || owners === null) {
        throw new Error("Missing the required parameter 'owners' when calling addFarm");
      }
      // verify the required parameter 'people' is set
      if (people === undefined || people === null) {
        throw new Error("Missing the required parameter 'people' when calling addFarm");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': id,'kind': kind,'name': name,'createDate': createDate,'address': address,'owners': this.apiClient.buildCollectionParam(owners, 'multi'),'people': this.apiClient.buildCollectionParam(people, 'multi')
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Farm;

      return this.apiClient.callApi(
        '/farm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addPerson operation.
     * @callback moduleapi/FarmApi~addPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add farm access for an existing person
     * Add farm access for an existing person
     * @param {module:model/Farm} body Add farm access for an existent person
     * @param {Number} farmId id of farm to return
     * @param {module:api/FarmApi~addPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addPerson(body, farmId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPerson");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling addPerson");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Farm;

      return this.apiClient.callApi(
        '/farm/addFarmAccess/{farmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteFarm operation.
     * @callback moduleapi/FarmApi~deleteFarmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a farm
     * delete a farm
     * @param {Number} farmId Farm id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/FarmApi~deleteFarmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFarm(farmId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling deleteFarm");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/farm/{farmId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findFarmByName operation.
     * @callback moduleapi/FarmApi~findFarmByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds a farm by name
     * Looks up the farm by name
     * @param {Object} opts Optional parameters
     * @param {String} opts.name String for farm name
     * @param {module:api/FarmApi~findFarmByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findFarmByName(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Farm;

      return this.apiClient.callApi(
        '/farm/findByName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFarmById operation.
     * @callback moduleapi/FarmApi~getFarmByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find farm by id
     * Returns a single farm
     * @param {Number} farmId id of farm to return
     * @param {module:api/FarmApi~getFarmByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFarmById(farmId, callback) {
      
      let postBody = null;
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling getFarmById");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Farm;

      return this.apiClient.callApi(
        '/farm/{farmId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removePerson operation.
     * @callback moduleapi/FarmApi~removePersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove farm access for an existing person
     * Remove farm access for an existing person
     * @param {module:model/Farm} body remove farm access for an existent person
     * @param {Number} id 
     * @param {String} kind 
     * @param {String} name 
     * @param {Date} createDate 
     * @param {module:model/Address} address 
     * @param {Array.<module:model/PersonAssociation>} owners 
     * @param {Array.<module:model/PersonAssociation>} people 
     * @param {Number} farmId id of farm to return
     * @param {module:api/FarmApi~removePersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    removePerson(body, id, kind, name, createDate, address, owners, people, farmId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removePerson");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removePerson");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling removePerson");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling removePerson");
      }
      // verify the required parameter 'createDate' is set
      if (createDate === undefined || createDate === null) {
        throw new Error("Missing the required parameter 'createDate' when calling removePerson");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling removePerson");
      }
      // verify the required parameter 'owners' is set
      if (owners === undefined || owners === null) {
        throw new Error("Missing the required parameter 'owners' when calling removePerson");
      }
      // verify the required parameter 'people' is set
      if (people === undefined || people === null) {
        throw new Error("Missing the required parameter 'people' when calling removePerson");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling removePerson");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': id,'kind': kind,'name': name,'createDate': createDate,'address': address,'owners': this.apiClient.buildCollectionParam(owners, 'multi'),'people': this.apiClient.buildCollectionParam(people, 'multi')
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Farm;

      return this.apiClient.callApi(
        '/farm/removeFarmAccess/{farmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateFarm operation.
     * @callback moduleapi/FarmApi~updateFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing farm
     * Update an existing farm by ID
     * @param {module:model/Farm} body Update an existent farm
     * @param {Number} id 
     * @param {String} kind 
     * @param {String} name 
     * @param {Date} createDate 
     * @param {module:model/Address} address 
     * @param {Array.<module:model/PersonAssociation>} owners 
     * @param {Array.<module:model/PersonAssociation>} people 
     * @param {module:api/FarmApi~updateFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateFarm(body, id, kind, name, createDate, address, owners, people, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFarm");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFarm");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling updateFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateFarm");
      }
      // verify the required parameter 'createDate' is set
      if (createDate === undefined || createDate === null) {
        throw new Error("Missing the required parameter 'createDate' when calling updateFarm");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling updateFarm");
      }
      // verify the required parameter 'owners' is set
      if (owners === undefined || owners === null) {
        throw new Error("Missing the required parameter 'owners' when calling updateFarm");
      }
      // verify the required parameter 'people' is set
      if (people === undefined || people === null) {
        throw new Error("Missing the required parameter 'people' when calling updateFarm");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'id': id,'kind': kind,'name': name,'createDate': createDate,'address': address,'owners': this.apiClient.buildCollectionParam(owners, 'multi'),'people': this.apiClient.buildCollectionParam(people, 'multi')
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Farm;

      return this.apiClient.callApi(
        '/farm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}