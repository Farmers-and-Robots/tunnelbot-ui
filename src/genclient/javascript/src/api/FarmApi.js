/**
 * Tunnelbot - OpenAPI 3.0
 * This is the API specification for the tunnelbot backend.
 *
 * The version of the OpenAPI document: 1
 * Contact: info@farmersandrobots.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Farm from '../model/Farm';

/**
* Farm service.
* @module api/FarmApi
* @version 1
*/
export default class FarmApi {

    /**
    * Constructs a new FarmApi. 
    * @alias module:api/FarmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFarm operation.
     * @callback module:api/FarmApi~addFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new farm to the db
     * Add a new farm to the db
     * @param {module:model/Farm} farm Create a new farm in the db
     * @param {module:api/FarmApi~addFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    addFarm(farm, callback) {
      let postBody = farm;
      // verify the required parameter 'farm' is set
      if (farm === undefined || farm === null) {
        throw new Error("Missing the required parameter 'farm' when calling addFarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/farm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPerson operation.
     * @callback module:api/FarmApi~addPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add farm access for an existing person
     * Add farm access for an existing person
     * @param {Number} farmId id of farm to return
     * @param {module:model/Farm} farm Add farm access for an existent person
     * @param {module:api/FarmApi~addPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    addPerson(farmId, farm, callback) {
      let postBody = farm;
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling addPerson");
      }
      // verify the required parameter 'farm' is set
      if (farm === undefined || farm === null) {
        throw new Error("Missing the required parameter 'farm' when calling addPerson");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/farm/addFarmAccess/{farmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFarm operation.
     * @callback module:api/FarmApi~deleteFarmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a farm
     * delete a farm
     * @param {Number} farmId Farm id to delete
     * @param {Object} opts Optional parameters
     * @param {String} [apiKey] 
     * @param {module:api/FarmApi~deleteFarmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFarm(farmId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling deleteFarm");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/farm/{farmId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findFarmByName operation.
     * @callback module:api/FarmApi~findFarmByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds a farm by name
     * Looks up the farm by name
     * @param {Object} opts Optional parameters
     * @param {String} [name] String for farm name
     * @param {module:api/FarmApi~findFarmByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    findFarmByName(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/farm/findByName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFarmById operation.
     * @callback module:api/FarmApi~getFarmByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find farm by id
     * Returns a single farm
     * @param {Number} farmId id of farm to return
     * @param {module:api/FarmApi~getFarmByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    getFarmById(farmId, callback) {
      let postBody = null;
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling getFarmById");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/farm/{farmId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePerson operation.
     * @callback module:api/FarmApi~removePersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove farm access for an existing person
     * Remove farm access for an existing person
     * @param {Number} farmId id of farm to return
     * @param {module:model/Farm} farm remove farm access for an existent person
     * @param {module:api/FarmApi~removePersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    removePerson(farmId, farm, callback) {
      let postBody = farm;
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling removePerson");
      }
      // verify the required parameter 'farm' is set
      if (farm === undefined || farm === null) {
        throw new Error("Missing the required parameter 'farm' when calling removePerson");
      }

      let pathParams = {
        'farmId': farmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/farm/removeFarmAccess/{farmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFarm operation.
     * @callback module:api/FarmApi~updateFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing farm
     * Update an existing farm by ID
     * @param {module:model/Farm} farm Update an existent farm
     * @param {module:api/FarmApi~updateFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    updateFarm(farm, callback) {
      let postBody = farm;
      // verify the required parameter 'farm' is set
      if (farm === undefined || farm === null) {
        throw new Error("Missing the required parameter 'farm' when calling updateFarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['firebase'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/farm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
