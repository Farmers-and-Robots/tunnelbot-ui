/**
 * Tunnelbot - OpenAPI 3.0
 * This is the API specification for the tunnelbot backend.
 *
 * The version of the OpenAPI document: 1
 * Contact: info@farmersandrobots.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PersonAssociation from './PersonAssociation';

/**
 * The Farm model module.
 * @module model/Farm
 * @version 1
 */
class Farm {
    /**
     * Constructs a new <code>Farm</code>.
     * @alias module:model/Farm
     */
    constructor() { 
        
        Farm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Farm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Farm} obj Optional instance to populate.
     * @return {module:model/Farm} The populated <code>Farm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Farm();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('createDate')) {
                obj['createDate'] = ApiClient.convertToType(data['createDate'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], [PersonAssociation]);
            }
            if (data.hasOwnProperty('people')) {
                obj['people'] = ApiClient.convertToType(data['people'], [PersonAssociation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Farm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Farm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['createDate'] && !(typeof data['createDate'] === 'string' || data['createDate'] instanceof String)) {
            throw new Error("Expected the field `createDate` to be a primitive type in the JSON string but got " + data['createDate']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        if (data['owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['owners'])) {
                throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
            }
            // validate the optional field `owners` (array)
            for (const item of data['owners']) {
                PersonAssociation.validateJSON(item);
            };
        }
        if (data['people']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['people'])) {
                throw new Error("Expected the field `people` to be an array in the JSON data but got " + data['people']);
            }
            // validate the optional field `people` (array)
            for (const item of data['people']) {
                PersonAssociation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Farm.prototype['id'] = undefined;

/**
 * @member {String} kind
 */
Farm.prototype['kind'] = undefined;

/**
 * @member {String} name
 */
Farm.prototype['name'] = undefined;

/**
 * @member {String} createDate
 */
Farm.prototype['createDate'] = undefined;

/**
 * @member {module:model/Address} address
 */
Farm.prototype['address'] = undefined;

/**
 * @member {Array.<module:model/PersonAssociation>} owners
 */
Farm.prototype['owners'] = undefined;

/**
 * @member {Array.<module:model/PersonAssociation>} people
 */
Farm.prototype['people'] = undefined;






export default Farm;

