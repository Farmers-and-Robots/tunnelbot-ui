/*
 * Tunnelbot - OpenAPI 3.0
 * This is the API specification for the tunnelbot backend.
 *
 * OpenAPI spec version: 1
 * Contact: info@farmersandrobots.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../../../api/ApiClient";
import { Device } from "../../../types/Device";

/**
 * Device service.
 * @module api/DeviceApi
 * @version 1
 */
export class DeviceApi {
  /**
   * Constructs a new DeviceApi.
   * @alias module:api/DeviceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API api implementation to use,
   * default to {@link module:ApiClient#instanc
    e} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the addDevice operation.
   * @callback moduleapi/DeviceApi~addDeviceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Device{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Add a new device to the db
   * Add a new device to the db
   * @param {module:model/Device} body Create a new device in the db
   * @param {Number} id
   * @param {String} kind
   * @param {String} name
   * @param {module:model/DeviceCategory} category
   * @param {module:api/DeviceApi~addDeviceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  addDevice(body, id, kind, name, category, callback) {
    let postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling addDevice",
      );
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling addDevice",
      );
    }
    // verify the required parameter 'kind' is set
    if (kind === undefined || kind === null) {
      throw new Error(
        "Missing the required parameter 'kind' when calling addDevice",
      );
    }
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error(
        "Missing the required parameter 'name' when calling addDevice",
      );
    }
    // verify the required parameter 'category' is set
    if (category === undefined || category === null) {
      throw new Error(
        "Missing the required parameter 'category' when calling addDevice",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {
      id: id,
      kind: kind,
      name: name,
      category: category,
    };

    let authNames = ["firebase"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
    ];
    let accepts = ["application/json"];
    let returnType = Device;

    return this.apiClient.callApi(
      "/device",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the deleteDevice operation.
   * @callback moduleapi/DeviceApi~deleteDeviceCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Deletes a device
   * delete a device
   * @param {Number} deviceId Device id to delete
   * @param {Object} opts Optional parameters
   * @param {String} opts.apiKey
   * @param {module:api/DeviceApi~deleteDeviceCallback} callback The callback function, accepting three arguments: error, data, response
   */
  deleteDevice(deviceId, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'deviceId' is set
    if (deviceId === undefined || deviceId === null) {
      throw new Error(
        "Missing the required parameter 'deviceId' when calling deleteDevice",
      );
    }

    let pathParams = {
      deviceId: deviceId,
    };
    let queryParams = {};
    let headerParams = {
      api_key: opts["apiKey"],
    };
    let formParams = {};

    let authNames = ["firebase"];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      "/device/{deviceId}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the getDeviceById operation.
   * @callback moduleapi/DeviceApi~getDeviceByIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Device{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Find device by id
   * Returns a single device
   * @param {Number} deviceId id of device to return
   * @param {module:api/DeviceApi~getDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getDeviceById(deviceId, callback) {
    let postBody = null;
    // verify the required parameter 'deviceId' is set
    if (deviceId === undefined || deviceId === null) {
      throw new Error(
        "Missing the required parameter 'deviceId' when calling getDeviceById",
      );
    }

    let pathParams = {
      deviceId: deviceId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["firebase"];
    let contentTypes = [];
    let accepts = ["application/json", "application/xml"];
    let returnType = Device;

    return this.apiClient.callApi(
      "/device/{deviceId}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the getDevices operation.
   * @callback moduleapi/DeviceApi~getDevicesCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Device>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Return the devices on a farm
   * Return the devices on a farm
   * @param {module:api/DeviceApi~getDevicesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getDevices(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = ["firebase"];
    let contentTypes = [];
    let accepts = ["application/json"];
    let returnType = [Device];

    return this.apiClient.callApi(
      "/device",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the updateDevice operation.
   * @callback moduleapi/DeviceApi~updateDeviceCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Device{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update an existing device
   * Update an existing device by ID
   * @param {module:model/Device} body Update an existent device
   * @param {Number} id
   * @param {String} kind
   * @param {String} name
   * @param {module:model/DeviceCategory} category
   * @param {module:api/DeviceApi~updateDeviceCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  updateDevice(body, id, kind, name, category, callback) {
    let postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling updateDevice",
      );
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling updateDevice",
      );
    }
    // verify the required parameter 'kind' is set
    if (kind === undefined || kind === null) {
      throw new Error(
        "Missing the required parameter 'kind' when calling updateDevice",
      );
    }
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error(
        "Missing the required parameter 'name' when calling updateDevice",
      );
    }
    // verify the required parameter 'category' is set
    if (category === undefined || category === null) {
      throw new Error(
        "Missing the required parameter 'category' when calling updateDevice",
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {
      id: id,
      kind: kind,
      name: name,
      category: category,
    };

    let authNames = ["firebase"];
    let contentTypes = [
      "application/json",
      "application/x-www-form-urlencoded",
    ];
    let accepts = ["application/json"];
    let returnType = Device;

    return this.apiClient.callApi(
      "/device",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback,
    );
  }
}
